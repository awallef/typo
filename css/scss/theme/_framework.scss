/**
 *	for the syntax look at:
 *	http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/
 *	
 *	BEM syntax:
 *	
 *	.block{}
 *	.block__element{}
 * 	.block--modifier{}
 *
 *	.person{}
 *	.person__hand{}
 *	.person--female{}
 *	.person--female__hand{}
 *	.person__hand--left{}
 *
 *	to see what is BEM ( Blocks, Elements, Modifiers ) check:
 *	http://bem.info/method/definitions/
 */

/* COMPASS
*****************************************/
@import "compass";
@import "compass/css3";
@import "compass/layout/sticky-footer";
@import "compass/utilities";
@import "compass/utilities/general/hacks";

/* GENERATED SIZES
*****************************************/
$base-spacing-unit: $base-line-height!default;
$half-spacing-unit: $base-spacing-unit / 2!default;
$line-height-ratio: $base-line-height / $base-font-size;



/* MIXINS
*****************************************/
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
@mixin font-size($font-size, $line-height:true){
    font-size:$font-size;
    font-size:($font-size / $base-font-size)*1rem;
    @if $line-height == true{
        line-height:ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
    }
}


/**
 * Style any number of headings in one fell swoop, e.g.:
 *
   .foo{
       @include headings(1, 3){
           color:#BADA55;
       }
    }
 *
 * With thanks to @lar_zzz, @paranoida, @rowanmanning and ultimately
 * @thierrylemoulec for refining and improving my initial mixin.
 */
@mixin headings($from: 1, $to: 6){
    %base-heading {
        @content
    }

    @if $from >= 1 and $to <= 6{
        @for $i from $from through $to{
            h#{$i}{
                @extend %base-heading;
            }
        }
    }
}


/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}


/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 *
   .foo{
       @include vendor(animation, shrink 3s);
   }

   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 *
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
@mixin keyframe ($animation-name){
    @-webkit-keyframes $animation-name{
        @content;
    }

    @-moz-keyframes $animation-name{
        @content;
    }

    @-ms-keyframes $animation-name{
        @content;
    }

    @-o-keyframes $animation-name{
        @content;
    }

    @keyframes $animation-name{
        @content;
    }
}


/**
 * Force overly long spans of text to truncate, e.g.:
 *
   `@include truncate(100%);`
 *
 * Where `$truncation-boundary` is a united measurement.
 */
@mixin truncate($truncation-boundary){
    max-width:$truncation-boundary;
    white-space:nowrap;
    overflow:hidden;
    text-overflow:ellipsis;
}


/**
 * CSS arrows!!! But... before you read on, you might want to grab a coffee...
 *
 * This mixin creates a CSS arrow on a given element. We can have the arrow
 * appear in one of 12 locations, thus:
 *
 *       01    02    03
 *    +------------------+
 * 12 |                  | 04
 *    |                  |
 * 11 |                  | 05
 *    |                  |
 * 10 |                  | 06
 *    +------------------+
 *       09    08    07
 *
 * You pass this position in along with a desired arrow color and optional
 * border color, for example:
 *
 * `@include arrow(top, left, red)`
 *
 * for just a single, red arrow, or:
 *
 * `@include arrow(bottom, center, red, black)`
 *
 * which will create a red triangle with a black border which sits at the bottom
 * center of the element. Call the mixin thus:
 *
   .foo{
       background-color:#BADA55;
       border:1px solid #ACE;
       @include arrow(top, left, #BADA55, #ACE);
   }
 *
 */
@mixin arrow($arrow-edge, $arrow-location, $arrow-color, $border-color: $arrow-color){

    @if $arrow-edge == top{

        @extend %arrow--top;

        &:before{
            border-bottom-color:$border-color!important;
        }

        &:after{
            border-bottom-color:$arrow-color!important;
        }

        @if $arrow-location == left{
            @extend %arrow--left;
        }

        @if $arrow-location == center{
            @extend %arrow--center;
        }

        @if $arrow-location == right{
            @extend %arrow--right;
        }

    }

    @if $arrow-edge == right{

        @extend %arrow--far;

        &:before{
            border-left-color:$border-color!important;
        }

        &:after{
            border-left-color:$arrow-color!important;
        }

        @if $arrow-location == top{
            @extend %arrow--upper;
        }

        @if $arrow-location == center{
            @extend %arrow--middle;
        }

        @if $arrow-location == bottom{
            @extend %arrow--lower;
        }

    }

    @if $arrow-edge == bottom{

        @extend %arrow--bottom;

        &:before{
            border-top-color:$border-color!important;
        }

        &:after{
            border-top-color:$arrow-color!important;
        }

        @if $arrow-location == left{
            @extend %arrow--left;
        }

        @if $arrow-location == center{
            @extend %arrow--center;
        }

        @if $arrow-location == right{
            @extend %arrow--right;
        }

    }

    @if $arrow-edge == left{

        @extend %arrow--near;

        &:before{
            border-right-color:$border-color!important;
        }

        &:after{
            border-right-color:$arrow-color!important;
        }

        @if $arrow-location == top{
            @extend %arrow--upper;
        }

        @if $arrow-location == center{
            @extend %arrow--middle;
        }

        @if $arrow-location == bottom{
            @extend %arrow--lower;
        }

    }

}


/**
 * Media query mixin. Based on bootstrap media queries!!!
 *
 * large-desktop
 * tablet
 * phone-to-tablet
 * phone
 *
 * Not using a media query will, naturally, serve styles to all devices
 *
 * `@include media-query(phone){ [styles here] }`
 *
 */
@mixin media-query($media-query){

    @if $media-query == large-desktop {

        @media (min-width: 1200px) { @content; }

    }

    @if $media-query == desktop {

        @media (min-width: 980px) and (max-width: 1199px) { @content; }

    }
    
    @if $media-query == tablet-to-desktop {

        @media (min-width: 768px) and (max-width: 979px) { @content; }

    }

    @if $media-query == tablet {

        @media (max-width: 767px) { @content; }

    }
    
    @if $media-query == phone-to-tablet {

        @media (min-width: 481px) and (max-width: 767px) { @content; }

    }
    
    @if $media-query == phone {

        @media (max-width: 480px) { @content; }

    }

}

/* HTML PAGE BASE
*****************************************/
html, body {
    font:#{($base-font-size/16px)*1em}/#{$line-height-ratio} $base-font-family;
    min-height:100%;
    font-weight: $base-font-weight;
}

/* HEADINGS
*****************************************/
h1,.alpha{
    @include font-size($h1-size);
}
h2,.beta{
    @include font-size($h2-size);
}
h3,.gamma{
    @include font-size($h3-size);
}
h4,.delta{
    @include font-size($h4-size);
}
h5,.epsilon{
    @include font-size($h5-size);
}
h6,.zeta{
    @include font-size($h6-size);
}

/* FAT SIZES
*****************************************/
.giga{
    @include font-size($giga-size);
}
.mega{
    @include font-size($mega-size);
}
.kilo{
    @include font-size($kilo-size);
}

/* SMALL SIZES
*****************************************/
.smallprint,
.milli{
    @include font-size($milli-size);
}
.micro{
    @include font-size($micro-size);
}

/* HELPERS
*****************************************/
.display--none { display: none; }
.display--block { display: block; }
.display--inline { display: inline; }
.display--table-cell { display:table-cell; }

.float--right   { float:right!important; }
.float--left    { float:left !important; }
.float--none    { float:none !important; }

.clear--both{ clear: both!important; }
.clear--right{ clear: right!important; }
.clear--left{ clear: left!important; }
.clear--none{ clear: none!important; }

.text--left     { text-align:left  !important; }
.text--center   { text-align:center!important; }
.text--right    { text-align:right !important; }

.weight--light      { font-weight:300!important; }
.weight--normal     { font-weight:400!important; }
.weight--semibold   { font-weight:600!important; }

.position--relative { position: relative;}
.position--absolute { position: absolute;}
.position--inherit { position: inherit;}

.caps { text-transform:uppercase!important; }